package ch08_interface_abstractClass;

/*interface ruf제{
   지불하다(int rmador);
*/
public interface Payment {
	//상수
	//생성자 
	//추상 메소드 - 지불하다
	void pay(int amount);

}

/*인터페이스는 코드의 종속성을 낮춘다
*코드의 종속성은 각 각의 메서드간의 결합도를 의미.
*인터페이스를 활용하면
 하나의 메서드를 수정하면, 다른 메서드도 변경해야만 하는 상황을 줄여준다.

*인터페이스는 
 상수(public static final)는 여러 구현클래스에서 공유하는 용도
 =>코드의 중복을 줄인다. 일관성을 유지

*인터페이스는 호환성을 높인다

*소프트웨어 설계원칙 중에 개방-폐쇄 원칙있다
*인터페이스는 <변경에 강하다>
 인터페이스는 <확장에는 열려있고, 변경에는 닫혀있다>

*응집도(Cohesion) :
 클래스나 모듈내부의 기능이 얼마나 밀접하게 관련되어 있느냐.
 응집도가 높을 수록 
 각 클래스나 모듈이 하나의 기능을 가지고 있다.
*결합도(coupling) : 클래스-클래스간의 관계, 메서드-메서드와 관계
 얼마나 강력하게 결합이 되어 있느냐.
 결합도는 낮을 수록 각 클래스는 서로 독립적이고,
  변경이 발생되면 다른 클래스에 미치는 영향이 적어진다
->좋은 소프트웨어는 응집도는 높이고, 결합도는 낮춘다
=>유지보수, 재사용성이 좋아진다
*/