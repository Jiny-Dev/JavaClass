package ch05_Array;

/*배열이란?(p177)
-같은 타입의 데이터를 연속된 공간에 저장하는 자료구조 
-각 데이터 저장 위치는 인덱스 부여해 접근

배열의 장점
-중복된 변수 선언 줄이기 위해 사용
-반복문을 이용해 요소들을 쉽게 처리

배열의 단점
-동일 타입만 가능 //int에 char을 넣을 수 있다. 아스키 코드로 저장, 같은 정수라도 크기가 달라 불가능하다.
-배열의 크기를 정정할 수 없다.

배열선언
형식>타입[] 배열변수명;
형식>타입   배열변수명[];

배열생성
방법1.값 목록으로 배열 생성하는 방법
	1)변수 선언과 동시에 값 목록 대입    //int score =100;
	2)변수 선언 후 값 목록 대입                //int score; ~score = 100;
방법2.new 연산자로 배열 생성
-배열 생성시 값 목록을 가지고 있지 않음
-향후 값들을 저장할 배열을 미리 생성하고 싶을 경우

배열의 길이: 배열에 저장할 수 있는 전체 항목 수
-배열명.length
 */

public class ArrayEx02 {

	public static void main(String[] args) {
		//배열의 단점 - 동일한 타입만 가능
		byte[] arr1 = {1, 100, 127};
/*	    byte[] arr1 = {1, 100, 127L}; byte 타입 배열에는 127L long타입 저장 X
		char[] arr2 = {'a', 'b', 'c', 3.14, true};
		boolean arr3 = {true, true, false, 'a', 3.14};
*/

		//배열의 단점 - 배열의 크기를 변경할 수 없다
/*		int [] arr4 = {100, 200};
		arr4[3] = 500;
		String[] names = {"홍길동", "세종대왕"};
		names [2] = "김9";
*/

		//new 연산자로 배열 생성
		double[] arr5 = new double[1];
		arr5[0] = 100;
		arr5[1] = 100;

		//char[] arr6 = new char[2]{'a', 'b', 'c'}; //에러발생, 사이즈를 정해놓고 값을 주면 에러가 난다.
		char[] arr7 = new char[]{'a', 'b', 'c'}; // 사이즈를 주지 않으면 정상 작동한다.
		//해당 코드는 실수할 가능성이 높기 때문에 값을 지정해주는 것이 자주 사용된다.
	}

}

